// forchangearea
// 3 November 2018
// by Luis
// Extracts forest-loss area for each year and region of interest
// Output (exported to drive) is a csv table with level_2 region code in the first column,
// no forest loss area (in sq m) in second column, the rest of the columns represent
// forest loss area for each year after 2000 (2001-2017)

// 1. Read and Subset Data
// 1.1 Forest dataset 
// 1.1.1 Pulls Hansen forest loss dataset
var hansen = ee.Image("UMD/hansen/global_forest_change_2017_v1_5");
// 1.1.2 Creates mask to exclude pixels with no forest
var treeMask = hansen.mask(hansen.select('treecover2000'))
// 1.1.3 Creates layer with % of tree cover in 2000
var treeCover = treeMask.select('treecover2000');

// 1.1.4 Creates individual layers of area for non-lost forest pixels, and loss for each year 2001-2017
var nolossArea = treeMask.select(['lossyear']).eq(0).multiply(ee.Image.pixelArea());
var lossArea2001 = treeMask.select(['lossyear']).eq(1).multiply(ee.Image.pixelArea());
var lossArea2002 = treeMask.select(['lossyear']).eq(2).multiply(ee.Image.pixelArea());
var lossArea2003 = treeMask.select(['lossyear']).eq(3).multiply(ee.Image.pixelArea());
var lossArea2004 = treeMask.select(['lossyear']).eq(4).multiply(ee.Image.pixelArea());
var lossArea2005 = treeMask.select(['lossyear']).eq(5).multiply(ee.Image.pixelArea());
var lossArea2006 = treeMask.select(['lossyear']).eq(6).multiply(ee.Image.pixelArea());
var lossArea2007 = treeMask.select(['lossyear']).eq(7).multiply(ee.Image.pixelArea());
var lossArea2008 = treeMask.select(['lossyear']).eq(8).multiply(ee.Image.pixelArea());
var lossArea2009 = treeMask.select(['lossyear']).eq(9).multiply(ee.Image.pixelArea());
var lossArea2010 = treeMask.select(['lossyear']).eq(10).multiply(ee.Image.pixelArea());
var lossArea2011 = treeMask.select(['lossyear']).eq(11).multiply(ee.Image.pixelArea());
var lossArea2012 = treeMask.select(['lossyear']).eq(12).multiply(ee.Image.pixelArea());
var lossArea2013 = treeMask.select(['lossyear']).eq(13).multiply(ee.Image.pixelArea());
var lossArea2014 = treeMask.select(['lossyear']).eq(14).multiply(ee.Image.pixelArea());
var lossArea2015 = treeMask.select(['lossyear']).eq(15).multiply(ee.Image.pixelArea());
var lossArea2016 = treeMask.select(['lossyear']).eq(16).multiply(ee.Image.pixelArea());
var lossArea2017 = treeMask.select(['lossyear']).eq(17).multiply(ee.Image.pixelArea());



// 1.2 Reads boundaries dataset
var level2bound = ee.FeatureCollection("users/luiscartor/gadm36_2_reduced");

// 1.3 Subsets to country: Indonesia = IDN. Comment if extracting for the whole dataset.
// If using filtered featured collection, change input name in map function.
//var filtered = level2bound.filter(ee.Filter.eq('GID_0', 'IDN'));

// 2. Analysis
// 2.1 Select input feature collection
var inputcoll = level2bound
//var inputcoll = filtered

// 2.2 Forest area loss extraction for each feature
// Maps through feature collection, and extracts the sum of the area
// for each of the loss layers (noloss or lossYYYY).
// lossAreaYYYY layers are multiplied by the tree cover to account for coverage %.
// A sum reducer is applied to calculate loss area for each year.
// Divides by 100 as treecover layer is in %.
var result = inputcoll.map(function f(feature) {
  return feature.set("noloss",
  ee.Number(treeCover.multiply(nolossArea).reduceRegion({
    reducer: ee.Reducer.sum().setOutputs(['noloss']),
    geometry:feature.geometry(), 
    maxPixels:1e14,
  }).get('treecover2000')).divide(100))
  .set("loss2001",
  ee.Number(treeCover.multiply(lossArea2001).reduceRegion({
    reducer: ee.Reducer.sum().setOutputs(['loss2001']),
    geometry:feature.geometry(), 
    maxPixels:1e14,
  }).get('treecover2000')).divide(100))
  .set("loss2002",ee.Number(treeCover.multiply(lossArea2002).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2002']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2003",ee.Number(treeCover.multiply(lossArea2003).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2003']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2004",ee.Number(treeCover.multiply(lossArea2004).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2004']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2005",ee.Number(treeCover.multiply(lossArea2005).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2005']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2006",ee.Number(treeCover.multiply(lossArea2006).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2006']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2007",ee.Number(treeCover.multiply(lossArea2007).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2007']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2008",ee.Number(treeCover.multiply(lossArea2008).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2008']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2009",ee.Number(treeCover.multiply(lossArea2009).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2009']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2010",ee.Number(treeCover.multiply(lossArea2010).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2010']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2011",ee.Number(treeCover.multiply(lossArea2011).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2011']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2012",ee.Number(treeCover.multiply(lossArea2012).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2012']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2013",ee.Number(treeCover.multiply(lossArea2013).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2013']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2014",ee.Number(treeCover.multiply(lossArea2014).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2014']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2015",ee.Number(treeCover.multiply(lossArea2015).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2015']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2016",ee.Number(treeCover.multiply(lossArea2016).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2016']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
  .set("loss2017",ee.Number(treeCover.multiply(lossArea2017).reduceRegion({reducer: ee.Reducer.sum().setOutputs(['loss2017']),geometry:feature.geometry(),maxPixels:1e14,}).get('treecover2000')).divide(100))
});


// 3. Outputs
// 3.1 Print result (if small enough, otherwise "timeout" error)
//print(resultarea)

// 3.2 Export to drive as a .csv
Export.table.toDrive({
  collection:result,
  // Edit dataset name here
  description:'level2_forestlossarea',
  fileFormat:'CSV',
  // Subset output features to reduce export time
  selectors: (['GID_2','noloss','loss2001','loss2002','loss2003','loss2004',
  'loss2005','loss2006','loss2007','loss2008','loss2009','loss2010','loss2011',
  'loss2012','loss2013','loss2014','loss2015','loss2016','loss2017'])
})


// 3.3 Data visualization
// Plots tree cover
Map.addLayer(treeCover,
  {bands: ['treecover2000'], palette: ['080a02', '03ff17']},
  'Forest cover');
// Plots boundaries with extracted data
Map.addLayer(result)